
--EXEC PROC_UNTRANSACTED_REPORT_NEW @FLAG = 'S', @USER = 'ADMIN',@FROM_DATE= '2020-06-17',@TO_DATE= '2020-06-17', @RPT_FOR = 'a'

ALTER PROC PROC_UNTRANSACTED_REPORT_NEW
(
	@FLAG VARCHAR(20)
	,@USER VARCHAR(50)
	,@FROM_DATE VARCHAR(20) = NULL
	,@TO_DATE VARCHAR(20) = NULL
	,@RPT_FOR NVARCHAR(10) = NULL
)
AS
SET NOCOUNT ON;
SET XACT_ABORT ON;
BEGIN
	IF @FLAG = 'S'
	BEGIN
		CREATE TABLE #REPORT_MAIN_NEW ([DATE] VARCHAR(30), [CUSTOMER NAME] NVARCHAR(100), [COLLECT AMT] VARCHAR(30), [RESOLVED DATE] VARCHAR(30), [RESOLVED AMT] VARCHAR(30),
												[RESOLVED TYPE] NVARCHAR(50), [PIN NO] VARCHAR(100), [PENDING REF NO] VARCHAR(100), ORDERBY TINYINT, CUSTOMERID BIGINT
												, TRANID BIGINT, DEPOSIT_APPROVED_DATE DATE)
		
		--WALLET REMAINING BALANCE
		SELECT ACCT_NUM, ACCT_NAME INTO #ACC_NEW
		FROM FastMoneyPro_Account.DBO.ac_master (NOLOCK) WHERE acct_rpt_code = 'CA'

		INSERT INTO #REPORT_MAIN_NEW(TRANID, [DATE], [CUSTOMER NAME], [COLLECT AMT], [PENDING REF NO], ORDERBY)
		SELECT * FROM (
		SELECT 0 TRANID, MIN(CONVERT(VARCHAR(10), TRAN_DATE, 121)) DT
					, A.acct_name
					, AMT = SUM(CASE WHEN part_tran_type = 'CR' THEN TRAN_AMT ELSE -1 * TRAN_AMT END)
					, A.acct_num
					, 0 ORDERBY
		FROM #ACC_NEW A
		INNER JOIN FastMoneyPro_Account.DBO.tran_master M(NOLOCK) ON M.acc_num = A.acct_num
		--WHERE M.tran_date BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		WHERE M.tran_date <= @TO_DATE + ' 23:59:59'
		GROUP BY A.acct_name, A.acct_num)X
		WHERE AMT <> 0

		SELECT * 
		INTO #CUSTOMER_OPENING_BAL
		FROM (
		SELECT 0 TRANID, MIN(CONVERT(VARCHAR(10), TRAN_DATE, 121)) DT
					, A.acct_name
					, AMT = SUM(CASE WHEN part_tran_type = 'CR' THEN TRAN_AMT ELSE -1 * TRAN_AMT END)
					, A.acct_num
					, 0 ORDERBY
					, CM.CUSTOMERID
		FROM #ACC_NEW A
		INNER JOIN FastMoneyPro_Account.DBO.tran_master M(NOLOCK) ON M.acc_num = A.acct_num
		INNER JOIN CUSTOMERMASTER CM(NOLOCK) ON CM.WALLETACCOUNTNO = M.ACC_NUM
		--WHERE M.tran_date BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		WHERE M.tran_date < @FROM_DATE
		GROUP BY A.acct_name, A.acct_num, CM.CUSTOMERID)X
		WHERE AMT <> 0

		--INSERT INTO #REPORT_MAIN_NEW(TRANID, [DATE], [CUSTOMER NAME], [COLLECT AMT], [PENDING REF NO], ORDERBY)
		--SELECT 0 TRANID, CONVERT(VARCHAR(10), TRAN_DATE, 121)
		--			, A.acct_name
		--			, AMT = TRAN_AMT
		--			, A.acct_num
		--			, 1 ORDERBY
		--FROM #ACC_NEW A
		--INNER JOIN FastMoneyPro_Account.DBO.tran_master M(NOLOCK) ON M.acc_num = A.acct_num
		--WHERE M.tran_date BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		--AND field2 = 'Wallet Refund'
		
		--DROP TABLE #REPORT_MAIN
		INSERT INTO #REPORT_MAIN_NEW(TRANID, [DATE], [COLLECT AMT], [CUSTOMER NAME], CUSTOMERID, [PIN NO], ORDERBY, DEPOSIT_APPROVED_DATE)
		SELECT tranId, CONVERT(VARCHAR(10), tranDate, 121), depositAmount, particulars, customerId, 'Untransacted', 2, APPROVEDDATE
		FROM CUSTOMER_DEPOSIT_LOGS (NOLOCK)
		WHERE (tranDate BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		OR approveddate BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		OR skippedDate BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59')
		--AND CAST(tranDate AS DATE) <> CAST(ISNULL(APPROVEDDATE, '1990-01-01') AS DATE)
		AND depositAmount > 0
		AND (isSkipped = 0 OR ISNULL(skipRemarks, '') = 'Refund')

		
		--INSERT INTO #REPORT_MAIN_NEW(TRANID, [DATE], [COLLECT AMT], [CUSTOMER NAME], CUSTOMERID, [PIN NO], ORDERBY, DEPOSIT_APPROVED_DATE, CUSTOMER_ID)
		SELECT CONVERT(VARCHAR(10), MIN(tranDate), 121) tranDate
				, MIN(CL.TRANID) DEPOSIT_LOG_ID, DBO.decryptDb(CONTROLNO) CONTROLNO
				, RR.CAMT, CONVERT(VARCHAR(10), RR.createdDate, 121) createdDate
				, CL.customerId
		INTO #OPENING_BAL_TXN
		FROM #CUSTOMER_OPENING_BAL C(NOLOCK)
		INNER JOIN TBL_BANK_DEPOSIT_TXN_MAPPING T(NOLOCK) ON T.CUSTOMER_ID = C.customerId
		INNER JOIN CUSTOMER_DEPOSIT_LOGS CL(NOLOCK) ON CL.customerId = T.CUSTOMER_ID AND CL.tranId = T.DEPOSIT_LOG_ID
		INNER JOIN REMITTRAN RR(NOLOCK) ON RR.holdTranId = T.HOLD_TRAN_ID
		WHERE RR.createdDate BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		GROUP BY C.AMT, RR.CAMT, DBO.decryptDb(CONTROLNO), CL.customerId, RR.CREATEDDATE
		
		
		SELECT M.DEPOSIT_LOG_ID, DBO.decryptDb(CONTROLNO) CONTROLNO, RR.cAmt, CONVERT(VARCHAR(10), RR.createdDate, 121) createdDate, M.CUSTOMER_ID
		INTO #DEPOSIT_MAPPING
		FROM #REPORT_MAIN_NEW R
		INNER JOIN TBL_BANK_DEPOSIT_TXN_MAPPING M(NOLOCK) ON M.DEPOSIT_LOG_ID = R.TRANID
		INNER JOIN REMITTRAN RR(NOLOCK) ON RR.holdTranId = M.HOLD_TRAN_ID
		WHERE RR.createdDate <= @TO_DATE + ' 23:59:59'
		--AND RR.TRANSTATUS <> 'CANCEL'

		ALTER TABLE #DEPOSIT_MAPPING ADD tranDate VARCHAR(20)

		DELETE DM
		FROM 
		#DEPOSIT_MAPPING DM
		INNER JOIN #OPENING_BAL_TXN OB ON OB.CONTROLNO = DM.CONTROLNO

		--UPDATE R SET R.[COLLECT AMT] = R.[COLLECT AMT] - TOTAL_SENT_AMT FROM
		--(SELECT SUM(M.CAMT) TOTAL_SENT_AMT, DEPOSIT_LOG_ID
		--FROM #REPORT_MAIN_NEW R
		--INNER JOIN #DEPOSIT_MAPPING M ON M.DEPOSIT_LOG_ID = R.TRANID AND M.createdDate = R.DEPOSIT_APPROVED_DATE
		----WHERE tranid=9537
		--GROUP BY M.DEPOSIT_LOG_ID
		--)X 
		--INNER JOIN #REPORT_MAIN_NEW R ON R.TRANID = X.DEPOSIT_LOG_ID

		--UPDATE #REPORT_MAIN_NEW SET IS_DELETE = 1
		

		--UPDATE R SET R.IS_DELETE = 0
		--FROM #REPORT_MAIN_NEW R
		--INNER JOIN #DEPOSIT_MAPPING M ON M.DEPOSIT_LOG_ID = R.TRANID AND M.createdDate = R.DEPOSIT_APPROVED_DATE
		--INNER JOIN #CUSTOMER_OPENING_BAL C ON C.CUSTOMERID = M.CUSTOMER_ID
		
		--SELECT * FROM #CUSTOMER_OPENING_BAL-- WHERE IS_DELETE = 0
		--return
		--SELECT *
		--FROM #REPORT_MAIN_NEW R
		--INNER JOIN #DEPOSIT_MAPPING M ON M.DEPOSIT_LOG_ID = R.TRANID AND M.createdDate = R.DEPOSIT_APPROVED_DATE
		--INNER JOIN #CUSTOMER_OPENING_BAL C ON C.CUSTOMERID = M.CUSTOMER_ID

		--SELECT *
		--FROM #DEPOSIT_MAPPING M 
		--INNER JOIN #CUSTOMER_OPENING_BAL C ON C.CUSTOMERID = M.CUSTOMER_ID
		--WHERE createdDate = @TO_DATE

		--DELETE M
		--FROM #REPORT_MAIN_NEW R
		--INNER JOIN #DEPOSIT_MAPPING M ON M.DEPOSIT_LOG_ID = R.TRANID AND M.createdDate = R.DEPOSIT_APPROVED_DATE
		----WHERE tranid=9537
		--WHERE R.[DATE] = R.DEPOSIT_APPROVED_DATE
		--AND ISNULL(R.IS_DELETE, 1) = 1

		SELECT * INTO #SEND_TXN
		FROM(
			SELECT 
			   L.tranId, 
			   (SELECT '; ' + controlNo
				FROM #DEPOSIT_MAPPING M
				WHERE M.DEPOSIT_LOG_ID = L.tranId
				FOR XML PATH('')) [CONTROLNO],
				(SELECT SUM(CAMT)
				FROM #DEPOSIT_MAPPING M
				WHERE M.DEPOSIT_LOG_ID = L.tranId
				FOR XML PATH('')) [RESOLVED AMOUNT],
				(SELECT MIN(createdDate)
				FROM #DEPOSIT_MAPPING M
				WHERE M.DEPOSIT_LOG_ID = L.tranId
				FOR XML PATH('')) [RESOLVED DATE]
			FROM #REPORT_MAIN_NEW L
			GROUP BY L.TRANID
		)X
		WHERE [CONTROLNO] IS NOT NULL
		ORDER BY 1

		ALTER TABLE #SEND_TXN ADD [TRAN DATE] VARCHAR(20), PARTICULARS NVARCHAR(50)

		INSERT INTO #SEND_TXN
		SELECT -1, [CONTROLNO], [RESOLVED AMOUNT], [RESOLVED DATE], [TRAN DATE], PARTICULARS FROM(
			SELECT 
			   L.PARTICULARS, 
			   (SELECT '; ' + controlNo
				FROM #OPENING_BAL_TXN M
				WHERE M.DEPOSIT_LOG_ID = L.tranId
				FOR XML PATH('')) [CONTROLNO],
				(SELECT SUM(CAMT)
				FROM #OPENING_BAL_TXN M
				WHERE M.DEPOSIT_LOG_ID = L.tranId
				FOR XML PATH('')) [RESOLVED AMOUNT],
				(SELECT MIN(createdDate)
				FROM #OPENING_BAL_TXN M
				WHERE M.DEPOSIT_LOG_ID = L.tranId
				FOR XML PATH('')) [RESOLVED DATE],
				(SELECT MIN(tranDate)
				FROM #OPENING_BAL_TXN M
				WHERE M.DEPOSIT_LOG_ID = L.tranId
				FOR XML PATH('')) [TRAN DATE]
			FROM CUSTOMER_DEPOSIT_LOGS L(NOLOCK)
			GROUP BY L.PARTICULARS, L.tranId
		)X
		WHERE [CONTROLNO] IS NOT NULL
		ORDER BY 1 
		
		UPDATE #SEND_TXN SET CONTROLNO = STUFF(CONTROLNO, 1, 1, '')

		UPDATE T SET T.[PIN NO] = S.CONTROLNO, T.[RESOLVED AMT] = S.[RESOLVED AMOUNT], T.[RESOLVED TYPE] = N'送金済', T.ORDERBY = 4,
				T.[RESOLVED DATE] = S.[RESOLVED DATE]
		--SELECT S.CONTROLNO, S.[RESOLVED AMOUNT]
		FROM #REPORT_MAIN_NEW T
		INNER JOIN #SEND_TXN S ON S.TRANID = T.TRANID
		
		INSERT INTO #REPORT_MAIN_NEW(TRANID, [DATE], [COLLECT AMT], [RESOLVED AMT], [CUSTOMER NAME], [PIN NO], ORDERBY, [RESOLVED DATE], [RESOLVED TYPE])
		SELECT tranId, [TRAN DATE], [RESOLVED AMOUNT], [RESOLVED AMOUNT], PARTICULARS, CONTROLNO, 5, [RESOLVED DATE], N'送金済'
		FROM #SEND_TXN 
		WHERE tranId = -1

		DELETE R 
		FROM #REPORT_MAIN_NEW R 
		WHERE CAST(R.[DATE] AS DATE) = CAST(ISNULL(R.[RESOLVED DATE], '1990-01-01') AS DATE)
		AND R.[RESOLVED TYPE] = N'送金済'
		
		SELECT CONVERT(VARCHAR(10), skippedDate, 121) skippedDate, tranId, depositAmount 
		INTO #REFUND
		FROM CUSTOMER_DEPOSIT_LOGS C(NOLOCK)
		WHERE isSkipped = 1 
		AND ISNULL(skipRemarks, '') = 'Refund'
		AND skippedDate BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'

		UPDATE R SET R.[RESOLVED AMT] = RR.depositAmount, R.[RESOLVED DATE] = RR.skippedDate, R.[RESOLVED TYPE] = N'返金', [PIN NO] = NULL, R.ORDERBY = 3
		FROM #REPORT_MAIN_NEW R
		INNER JOIN #REFUND RR ON RR.tranId = R.TRANID

		DELETE R
		FROM #REPORT_MAIN_NEW R
		INNER JOIN CUSTOMER_DEPOSIT_LOGS L (NOLOCK) ON L.tranId = R.TRANID AND R.[PIN NO] = 'Untransacted'
		WHERE 1=1 
		AND CAST(L.approveddate AS DATE) <= @TO_DATE
		
		IF @RPT_FOR = 'a'
		BEGIN
			SELECT * FROM (
				SELECT [DATE], [CUSTOMER NAME], [COLLECT AMT], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
				FROM #REPORT_MAIN_NEW 
				WHERE ISNULL([RESOLVED TYPE], '') <> N'送金済'

				UNION ALL 

				SELECT MIN([DATE]) [DATE], [CUSTOMER NAME] = [CUSTOMER NAME] + CASE WHEN COUNT(0) > 1 THEN ' ('+CAST(COUNT(0) AS VARCHAR) + ') ' ELSE '' END
							, SUM(CAST([COLLECT AMT] AS MONEY)) [COLLECT AMT], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
							--, [COLLECT AMT] = '0.00', [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
				FROM #REPORT_MAIN_NEW 
				WHERE [RESOLVED TYPE] = N'送金済'
				--AND [PIN NO] = '33JP212162931'
				GROUP BY [CUSTOMER NAME], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
			)X
			ORDER BY ORDERBY, [DATE]
		END
		ELSE IF @RPT_FOR = 'u'
		BEGIN
			SELECT * FROM (
				SELECT [DATE], [CUSTOMER NAME], [COLLECT AMT], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
				FROM #REPORT_MAIN_NEW 
				WHERE [PENDING REF NO] IS NOT NULL

				UNION ALL

				SELECT [DATE], [CUSTOMER NAME], [COLLECT AMT], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
				FROM #REPORT_MAIN_NEW 
				WHERE [PIN NO] = 'Untransacted'
			)X
			ORDER BY ORDERBY, [DATE]
		END
		ELSE IF @RPT_FOR = 'w'
		BEGIN
			SELECT * FROM (
				SELECT [DATE], [CUSTOMER NAME], [COLLECT AMT], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
				FROM #REPORT_MAIN_NEW 
				WHERE [PENDING REF NO] IS NOT NULL
			)X
			ORDER BY ORDERBY, [DATE]
		END
		ELSE IF @RPT_FOR = 'r'
		BEGIN
			SELECT * FROM (
				SELECT [DATE], [CUSTOMER NAME], [COLLECT AMT], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
				FROM #REPORT_MAIN_NEW 
				WHERE [RESOLVED TYPE] = N'返金'
			)X
			ORDER BY ORDERBY, [DATE]
		END
		ELSE IF @RPT_FOR = 'rs'
		BEGIN
			SELECT * FROM (
				SELECT MIN([DATE]) [DATE], [CUSTOMER NAME] = [CUSTOMER NAME] + CASE WHEN COUNT(0) > 1 THEN ' ('+CAST(COUNT(0) AS VARCHAR) + ') ' ELSE '' END
							, SUM(CAST([COLLECT AMT] AS MONEY)) [COLLECT AMT], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
				FROM #REPORT_MAIN_NEW 
				WHERE [RESOLVED TYPE] = N'送金済'
				--AND [PIN NO] = '33JP212162931'
				GROUP BY [CUSTOMER NAME], [RESOLVED DATE], [RESOLVED AMT], [RESOLVED TYPE], [PIN NO], [PENDING REF NO], ORDERBY
			)X
			ORDER BY ORDERBY, [DATE]
		END
		--SELECT * FROM #REPORT_MAIN_NEW ORDER BY ORDERBY, CUSTOMERID, [DATE]
	END
	ELSE IF @FLAG = 'A'
	BEGIN
		CREATE TABLE #REPORT_MAIN ([DATE] VARCHAR(30), [CUSTOMER NAME] NVARCHAR(80), [COLLECT AMT] VARCHAR(30), [RESOLVED DATE] VARCHAR(20), [RESOLVED AMT] VARCHAR(30),
										[RESOLVED TYPE] NVARCHAR(50), [PIN NO] VARCHAR(30), [PENDING REF NO] VARCHAR(30), ORDERBY TINYINT, CUSTOMERID BIGINT, CNT TINYINT)
		
		--WALLET REMAINING BALANCE
		SELECT ACCT_NUM, ACCT_NAME INTO #ACC 
		FROM FastMoneyPro_Account.DBO.ac_master (NOLOCK) WHERE acct_rpt_code = 'CA'

		INSERT INTO #REPORT_MAIN
		SELECT * FROM (
		SELECT MIN(CONVERT(VARCHAR(10), TRAN_DATE, 121)) DT, A.acct_name, AMT = SUM(CASE WHEN part_tran_type = 'CR' THEN TRAN_AMT ELSE -1 * TRAN_AMT END), 
					'' DT1, '' RES_AMT, '' RES_TYPE, '' PEND_REF, A.acct_num, 0 ORD_BY, 0 CUSTOMERID, 0 CNT
		FROM #ACC A
		INNER JOIN FastMoneyPro_Account.DBO.tran_master M(NOLOCK) ON M.acc_num = A.acct_num
		WHERE M.tran_date BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		GROUP BY A.acct_name, A.acct_num)X
		WHERE AMT <> 0

		
		--REFUND AMOUNT
		INSERT INTO #REPORT_MAIN
		SELECT TRANDATE, PARTICULARS, DEPOSITAMOUNT, skippedDate, depositAmount, N'返金', '', '', 2, 0, 0
		FROM CUSTOMER_DEPOSIT_LOGS (NOLOCK)
		WHERE ISSKIPPED = 1
		AND SKIPREMARKS = 'REFUND'
		AND skippedDate BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'


		--REMITTANCE SEND
		SELECT TRANDATE, PARTICULARS, DEPOSITAMOUNT, L.APPROVEDDATE, R.CAMT, N'送金済' NARRATION, DBO.DECRYPTDB(CONTROLNO) CONTROLNO
				, L.tranId, M.HOLD_TRAN_ID, L.customerId
		INTO #TEMP
		FROM CUSTOMER_DEPOSIT_LOGS L(NOLOCK)
		INNER JOIN TBL_BANK_DEPOSIT_TXN_MAPPING M(NOLOCK) ON M.DEPOSIT_LOG_ID = L.TRANID
		INNER JOIN REMITTRAN R(NOLOCK) ON R.HOLDTRANID = M.HOLD_TRAN_ID
		WHERE ISSKIPPED = 0
		AND CAST(L.TRANDATE AS DATE) <> CAST(L.APPROVEDDATE AS DATE)
		AND L.APPROVEDDATE IS NOT NULL
		AND R.tranStatus <> 'CANCEL'
		AND L.APPROVEDDATE BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'

		SELECT CNT = ROW_NUMBER() OVER (PARTITION BY TRANID ORDER BY trandate),* 
		INTO #A
		FROM #TEMP

		UPDATE #A SET PARTICULARS = '' , DEPOSITAMOUNT = ''
		WHERE CNT <> 1

		SELECT CNT1 = ROW_NUMBER() OVER (PARTITION BY HOLD_TRAN_ID ORDER BY approveddate),* 
		INTO #B
		FROM #A

		UPDATE #B SET cAmt = '' , NARRATION = '', CONTROLNO=''
		WHERE CNT1 <> 1

		INSERT INTO #REPORT_MAIN
		SELECT TRANDATE = CASE WHEN TRANDATE = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR(10), TRANDATE, 121) END
		, PARTICULARS, DEPOSITAMOUNT, APPROVEDDATE = CASE WHEN APPROVEDDATE = '1900-01-01 00:00:00.000' THEN '' ELSE CONVERT(VARCHAR(10), APPROVEDDATE, 121) END
		, CAMT, N'送金済', CONTROLNO, '', 3, CUSTOMERID, CNT
		FROM #B
		ORDER BY TRANDATE
		
		--UNTRANSACTED (MONEY DEPOSITED BUT NOT SENT)
		CREATE TABLE #UNTRANSACTED(DT VARCHAR(20), PARTICULARS NVARCHAR(100), DEPOSITAMOUNT VARCHAR(30), TRANID BIGINT)

		INSERT INTO #UNTRANSACTED
		SELECT * FROM (
		SELECT CONVERT(VARCHAR(10), TRANDATE, 121) DT, PARTICULARS, DEPOSITAMOUNT, TRANID
		FROM CUSTOMER_DEPOSIT_LOGS (NOLOCK)
		WHERE ISSKIPPED = 0
		AND (CAST(TRANDATE AS DATE) <> CAST(APPROVEDDATE AS DATE)  OR APPROVEDDATE IS NULL)
		--AND APPROVEDDATE IS NULL
		AND TRANDATE BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		--AND ISNULL(APPROVEDDATE, '2013-01-01') > @TO_DATE + ' 23:59:59'
		

		UNION ALL


		SELECT CONVERT(VARCHAR(10), TRANDATE, 121) DT, PARTICULARS, DEPOSITAMOUNT, TRANID
		FROM CUSTOMER_DEPOSIT_LOGS (NOLOCK)
		WHERE ISSKIPPED = 1
		AND TRANDATE BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		AND ISNULL(skippedDate, '1990-01-01') NOT BETWEEN @FROM_DATE AND @TO_DATE + ' 23:59:59'
		AND DEPOSITAMOUNT <> 0
		AND ISNULL(SKIPREMARKS, '') = 'REFUND'
		)X ORDER BY DT

		DELETE U FROM #B B
		INNER JOIN #UNTRANSACTED U ON U.TRANID = B.TRANID

		INSERT INTO #REPORT_MAIN
		SELECT DT, PARTICULARS, DEPOSITAMOUNT, '', '', '', 'Untransacted', '', 1, 0, 0
		FROM #UNTRANSACTED
		ORDER BY DT

		SELECT * FROM #REPORT_MAIN ORDER BY ORDERBY, CUSTOMERID, CNT
	END
END

--select * from CUSTOMER_DEPOSIT_LOGS where particulars = N'送金　ＶＵ　ＴＨＩ　Ｈ'
--select * from TBL_BANK_DEPOSIT_TXN_MAPPING where deposit_log_id=2211

