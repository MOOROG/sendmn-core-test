//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.34014.
// 
#pragma warning disable 1591

namespace Swift.API.com.global.www {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RemoteRemitSoap11Binding", Namespace="http://global.service.ntech")]
    public partial class RemoteRemit : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetBankOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBranchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteLocalRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteFxRateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessRemoteRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback AmendRemoteTxnOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProcessCashExpressRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAgentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteRemittanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRemoteLocalRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelRemoteRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteVostroAccDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashExpressRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteLocalStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddRemoteRemitOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRegionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteTransactionDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRemoteAccountDetailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RemoteRemit() {
            this.Url = global::Swift.API.Properties.Settings.Default.Swift_API_com_global_www_RemoteRemit;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetBankCompletedEventHandler GetBankCompleted;
        
        /// <remarks/>
        public event GetBranchCompletedEventHandler GetBranchCompleted;
        
        /// <remarks/>
        public event GetRemoteRemitCompletedEventHandler GetRemoteRemitCompleted;
        
        /// <remarks/>
        public event AddRemoteLocalRemitCompletedEventHandler AddRemoteLocalRemitCompleted;
        
        /// <remarks/>
        public event GetRemoteFxRateCompletedEventHandler GetRemoteFxRateCompleted;
        
        /// <remarks/>
        public event ProcessRemoteRemitCompletedEventHandler ProcessRemoteRemitCompleted;
        
        /// <remarks/>
        public event AmendRemoteTxnCompletedEventHandler AmendRemoteTxnCompleted;
        
        /// <remarks/>
        public event ProcessCashExpressRemitCompletedEventHandler ProcessCashExpressRemitCompleted;
        
        /// <remarks/>
        public event GetAgentCompletedEventHandler GetAgentCompleted;
        
        /// <remarks/>
        public event GetRemoteStatusCompletedEventHandler GetRemoteStatusCompleted;
        
        /// <remarks/>
        public event AddRemoteRemittanceCompletedEventHandler AddRemoteRemittanceCompleted;
        
        /// <remarks/>
        public event CancelRemoteLocalRemitCompletedEventHandler CancelRemoteLocalRemitCompleted;
        
        /// <remarks/>
        public event CancelRemoteRemitCompletedEventHandler CancelRemoteRemitCompleted;
        
        /// <remarks/>
        public event GetRemoteVostroAccDetailCompletedEventHandler GetRemoteVostroAccDetailCompleted;
        
        /// <remarks/>
        public event GetCashExpressRemitCompletedEventHandler GetCashExpressRemitCompleted;
        
        /// <remarks/>
        public event GetRemoteLocalStatusCompletedEventHandler GetRemoteLocalStatusCompleted;
        
        /// <remarks/>
        public event AddRemoteRemitCompletedEventHandler AddRemoteRemitCompleted;
        
        /// <remarks/>
        public event GetRegionCompletedEventHandler GetRegionCompleted;
        
        /// <remarks/>
        public event GetRemoteTransactionDetailCompletedEventHandler GetRemoteTransactionDetailCompleted;
        
        /// <remarks/>
        public event GetRemoteAccountDetailCompletedEventHandler GetRemoteAccountDetailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetBank", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetBank([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password) {
            object[] results = this.Invoke("GetBank", new object[] {
                        userName,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBankAsync(string userName, string password) {
            this.GetBankAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetBankAsync(string userName, string password, object userState) {
            if ((this.GetBankOperationCompleted == null)) {
                this.GetBankOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBankOperationCompleted);
            }
            this.InvokeAsync("GetBank", new object[] {
                        userName,
                        password}, this.GetBankOperationCompleted, userState);
        }
        
        private void OnGetBankOperationCompleted(object arg) {
            if ((this.GetBankCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBankCompleted(this, new GetBankCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetBranch", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetBranch([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string bankCode) {
            object[] results = this.Invoke("GetBranch", new object[] {
                        userName,
                        password,
                        bankCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBranchAsync(string userName, string password, string bankCode) {
            this.GetBranchAsync(userName, password, bankCode, null);
        }
        
        /// <remarks/>
        public void GetBranchAsync(string userName, string password, string bankCode, object userState) {
            if ((this.GetBranchOperationCompleted == null)) {
                this.GetBranchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBranchOperationCompleted);
            }
            this.InvokeAsync("GetBranch", new object[] {
                        userName,
                        password,
                        bankCode}, this.GetBranchOperationCompleted, userState);
        }
        
        private void OnGetBranchOperationCompleted(object arg) {
            if ((this.GetBranchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBranchCompleted(this, new GetBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRemoteRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRemoteRemit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo) {
            object[] results = this.Invoke("GetRemoteRemit", new object[] {
                        userName,
                        password,
                        radNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteRemitAsync(string userName, string password, string radNo) {
            this.GetRemoteRemitAsync(userName, password, radNo, null);
        }
        
        /// <remarks/>
        public void GetRemoteRemitAsync(string userName, string password, string radNo, object userState) {
            if ((this.GetRemoteRemitOperationCompleted == null)) {
                this.GetRemoteRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteRemitOperationCompleted);
            }
            this.InvokeAsync("GetRemoteRemit", new object[] {
                        userName,
                        password,
                        radNo}, this.GetRemoteRemitOperationCompleted, userState);
        }
        
        private void OnGetRemoteRemitOperationCompleted(object arg) {
            if ((this.GetRemoteRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteRemitCompleted(this, new GetRemoteRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:AddRemoteLocalRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] AddRemoteLocalRemit(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string controlNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefAddress, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefTel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefMobile, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefIdType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefAccIDNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderAddress, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderTel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderMobile, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderIdType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderIdNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string purpose, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string remitType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payingBankBranchCd, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string rCurrency, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string localAmount, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string amount, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string serviceCharge, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string rCommission, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string exchangeRate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string refNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string remarks, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string source) {
            object[] results = this.Invoke("AddRemoteLocalRemit", new object[] {
                        userName,
                        password,
                        controlNo,
                        benefName,
                        benefAddress,
                        benefTel,
                        benefMobile,
                        benefIdType,
                        benefAccIDNo,
                        senderName,
                        senderAddress,
                        senderTel,
                        senderMobile,
                        senderIdType,
                        senderIdNo,
                        purpose,
                        remitType,
                        payingBankBranchCd,
                        rCurrency,
                        localAmount,
                        amount,
                        serviceCharge,
                        rCommission,
                        exchangeRate,
                        refNo,
                        remarks,
                        source});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteLocalRemitAsync(
                    string userName, 
                    string password, 
                    string controlNo, 
                    string benefName, 
                    string benefAddress, 
                    string benefTel, 
                    string benefMobile, 
                    string benefIdType, 
                    string benefAccIDNo, 
                    string senderName, 
                    string senderAddress, 
                    string senderTel, 
                    string senderMobile, 
                    string senderIdType, 
                    string senderIdNo, 
                    string purpose, 
                    string remitType, 
                    string payingBankBranchCd, 
                    string rCurrency, 
                    string localAmount, 
                    string amount, 
                    string serviceCharge, 
                    string rCommission, 
                    string exchangeRate, 
                    string refNo, 
                    string remarks, 
                    string source) {
            this.AddRemoteLocalRemitAsync(userName, password, controlNo, benefName, benefAddress, benefTel, benefMobile, benefIdType, benefAccIDNo, senderName, senderAddress, senderTel, senderMobile, senderIdType, senderIdNo, purpose, remitType, payingBankBranchCd, rCurrency, localAmount, amount, serviceCharge, rCommission, exchangeRate, refNo, remarks, source, null);
        }
        
        /// <remarks/>
        public void AddRemoteLocalRemitAsync(
                    string userName, 
                    string password, 
                    string controlNo, 
                    string benefName, 
                    string benefAddress, 
                    string benefTel, 
                    string benefMobile, 
                    string benefIdType, 
                    string benefAccIDNo, 
                    string senderName, 
                    string senderAddress, 
                    string senderTel, 
                    string senderMobile, 
                    string senderIdType, 
                    string senderIdNo, 
                    string purpose, 
                    string remitType, 
                    string payingBankBranchCd, 
                    string rCurrency, 
                    string localAmount, 
                    string amount, 
                    string serviceCharge, 
                    string rCommission, 
                    string exchangeRate, 
                    string refNo, 
                    string remarks, 
                    string source, 
                    object userState) {
            if ((this.AddRemoteLocalRemitOperationCompleted == null)) {
                this.AddRemoteLocalRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteLocalRemitOperationCompleted);
            }
            this.InvokeAsync("AddRemoteLocalRemit", new object[] {
                        userName,
                        password,
                        controlNo,
                        benefName,
                        benefAddress,
                        benefTel,
                        benefMobile,
                        benefIdType,
                        benefAccIDNo,
                        senderName,
                        senderAddress,
                        senderTel,
                        senderMobile,
                        senderIdType,
                        senderIdNo,
                        purpose,
                        remitType,
                        payingBankBranchCd,
                        rCurrency,
                        localAmount,
                        amount,
                        serviceCharge,
                        rCommission,
                        exchangeRate,
                        refNo,
                        remarks,
                        source}, this.AddRemoteLocalRemitOperationCompleted, userState);
        }
        
        private void OnAddRemoteLocalRemitOperationCompleted(object arg) {
            if ((this.AddRemoteLocalRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteLocalRemitCompleted(this, new AddRemoteLocalRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRemoteFxRate", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRemoteFxRate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password) {
            object[] results = this.Invoke("GetRemoteFxRate", new object[] {
                        userName,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteFxRateAsync(string userName, string password) {
            this.GetRemoteFxRateAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetRemoteFxRateAsync(string userName, string password, object userState) {
            if ((this.GetRemoteFxRateOperationCompleted == null)) {
                this.GetRemoteFxRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteFxRateOperationCompleted);
            }
            this.InvokeAsync("GetRemoteFxRate", new object[] {
                        userName,
                        password}, this.GetRemoteFxRateOperationCompleted, userState);
        }
        
        private void OnGetRemoteFxRateOperationCompleted(object arg) {
            if ((this.GetRemoteFxRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteFxRateCompleted(this, new GetRemoteFxRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ProcessRemoteRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] ProcessRemoteRemit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tokenId) {
            object[] results = this.Invoke("ProcessRemoteRemit", new object[] {
                        userName,
                        password,
                        radNo,
                        tokenId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ProcessRemoteRemitAsync(string userName, string password, string radNo, string tokenId) {
            this.ProcessRemoteRemitAsync(userName, password, radNo, tokenId, null);
        }
        
        /// <remarks/>
        public void ProcessRemoteRemitAsync(string userName, string password, string radNo, string tokenId, object userState) {
            if ((this.ProcessRemoteRemitOperationCompleted == null)) {
                this.ProcessRemoteRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessRemoteRemitOperationCompleted);
            }
            this.InvokeAsync("ProcessRemoteRemit", new object[] {
                        userName,
                        password,
                        radNo,
                        tokenId}, this.ProcessRemoteRemitOperationCompleted, userState);
        }
        
        private void OnProcessRemoteRemitOperationCompleted(object arg) {
            if ((this.ProcessRemoteRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessRemoteRemitCompleted(this, new ProcessRemoteRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:AmendRemoteTxn", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] AmendRemoteTxn([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string oldBenefName) {
            object[] results = this.Invoke("AmendRemoteTxn", new object[] {
                        userName,
                        password,
                        radNo,
                        accNo,
                        benefName,
                        oldBenefName});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void AmendRemoteTxnAsync(string userName, string password, string radNo, string accNo, string benefName, string oldBenefName) {
            this.AmendRemoteTxnAsync(userName, password, radNo, accNo, benefName, oldBenefName, null);
        }
        
        /// <remarks/>
        public void AmendRemoteTxnAsync(string userName, string password, string radNo, string accNo, string benefName, string oldBenefName, object userState) {
            if ((this.AmendRemoteTxnOperationCompleted == null)) {
                this.AmendRemoteTxnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAmendRemoteTxnOperationCompleted);
            }
            this.InvokeAsync("AmendRemoteTxn", new object[] {
                        userName,
                        password,
                        radNo,
                        accNo,
                        benefName,
                        oldBenefName}, this.AmendRemoteTxnOperationCompleted, userState);
        }
        
        private void OnAmendRemoteTxnOperationCompleted(object arg) {
            if ((this.AmendRemoteTxnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AmendRemoteTxnCompleted(this, new AmendRemoteTxnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:ProcessCashExpressRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] ProcessCashExpressRemit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tokenId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string amount, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefIdType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefIdNo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefIdExpDt, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefMobile, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefNationality) {
            object[] results = this.Invoke("ProcessCashExpressRemit", new object[] {
                        userName,
                        password,
                        radNo,
                        tokenId,
                        amount,
                        benefIdType,
                        benefIdNo,
                        benefIdExpDt,
                        benefMobile,
                        benefNationality});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void ProcessCashExpressRemitAsync(string userName, string password, string radNo, string tokenId, string amount, string benefIdType, string benefIdNo, string benefIdExpDt, string benefMobile, string benefNationality) {
            this.ProcessCashExpressRemitAsync(userName, password, radNo, tokenId, amount, benefIdType, benefIdNo, benefIdExpDt, benefMobile, benefNationality, null);
        }
        
        /// <remarks/>
        public void ProcessCashExpressRemitAsync(string userName, string password, string radNo, string tokenId, string amount, string benefIdType, string benefIdNo, string benefIdExpDt, string benefMobile, string benefNationality, object userState) {
            if ((this.ProcessCashExpressRemitOperationCompleted == null)) {
                this.ProcessCashExpressRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProcessCashExpressRemitOperationCompleted);
            }
            this.InvokeAsync("ProcessCashExpressRemit", new object[] {
                        userName,
                        password,
                        radNo,
                        tokenId,
                        amount,
                        benefIdType,
                        benefIdNo,
                        benefIdExpDt,
                        benefMobile,
                        benefNationality}, this.ProcessCashExpressRemitOperationCompleted, userState);
        }
        
        private void OnProcessCashExpressRemitOperationCompleted(object arg) {
            if ((this.ProcessCashExpressRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProcessCashExpressRemitCompleted(this, new ProcessCashExpressRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetAgent", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetAgent([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string bankCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string regionCode) {
            object[] results = this.Invoke("GetAgent", new object[] {
                        userName,
                        password,
                        bankCode,
                        regionCode});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAgentAsync(string userName, string password, string bankCode, string regionCode) {
            this.GetAgentAsync(userName, password, bankCode, regionCode, null);
        }
        
        /// <remarks/>
        public void GetAgentAsync(string userName, string password, string bankCode, string regionCode, object userState) {
            if ((this.GetAgentOperationCompleted == null)) {
                this.GetAgentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAgentOperationCompleted);
            }
            this.InvokeAsync("GetAgent", new object[] {
                        userName,
                        password,
                        bankCode,
                        regionCode}, this.GetAgentOperationCompleted, userState);
        }
        
        private void OnGetAgentOperationCompleted(object arg) {
            if ((this.GetAgentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAgentCompleted(this, new GetAgentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRemoteStatus", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRemoteStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo) {
            object[] results = this.Invoke("GetRemoteStatus", new object[] {
                        userName,
                        password,
                        radNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteStatusAsync(string userName, string password, string radNo) {
            this.GetRemoteStatusAsync(userName, password, radNo, null);
        }
        
        /// <remarks/>
        public void GetRemoteStatusAsync(string userName, string password, string radNo, object userState) {
            if ((this.GetRemoteStatusOperationCompleted == null)) {
                this.GetRemoteStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteStatusOperationCompleted);
            }
            this.InvokeAsync("GetRemoteStatus", new object[] {
                        userName,
                        password,
                        radNo}, this.GetRemoteStatusOperationCompleted, userState);
        }
        
        private void OnGetRemoteStatusOperationCompleted(object arg) {
            if ((this.GetRemoteStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteStatusCompleted(this, new GetRemoteStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:AddRemoteRemittance", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] AddRemoteRemittance(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string controlNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefAddress, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefTel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefMobile, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefIdType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefAccIDNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderAddress, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderTel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderMobile, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderIdType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderIdNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string purpose, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string remitType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payingBankBranchCd, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string rCurrency, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string localAmount, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string amount, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string serviceCharge, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string rCommission, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string exchangeRate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string refNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string remarks, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string source) {
            object[] results = this.Invoke("AddRemoteRemittance", new object[] {
                        userName,
                        password,
                        controlNo,
                        benefName,
                        benefAddress,
                        benefTel,
                        benefMobile,
                        benefIdType,
                        benefAccIDNo,
                        senderName,
                        senderAddress,
                        senderTel,
                        senderMobile,
                        senderIdType,
                        senderIdNo,
                        purpose,
                        remitType,
                        payingBankBranchCd,
                        rCurrency,
                        localAmount,
                        amount,
                        serviceCharge,
                        rCommission,
                        exchangeRate,
                        refNo,
                        remarks,
                        source});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteRemittanceAsync(
                    string userName, 
                    string password, 
                    string controlNo, 
                    string benefName, 
                    string benefAddress, 
                    string benefTel, 
                    string benefMobile, 
                    string benefIdType, 
                    string benefAccIDNo, 
                    string senderName, 
                    string senderAddress, 
                    string senderTel, 
                    string senderMobile, 
                    string senderIdType, 
                    string senderIdNo, 
                    string purpose, 
                    string remitType, 
                    string payingBankBranchCd, 
                    string rCurrency, 
                    string localAmount, 
                    string amount, 
                    string serviceCharge, 
                    string rCommission, 
                    string exchangeRate, 
                    string refNo, 
                    string remarks, 
                    string source) {
            this.AddRemoteRemittanceAsync(userName, password, controlNo, benefName, benefAddress, benefTel, benefMobile, benefIdType, benefAccIDNo, senderName, senderAddress, senderTel, senderMobile, senderIdType, senderIdNo, purpose, remitType, payingBankBranchCd, rCurrency, localAmount, amount, serviceCharge, rCommission, exchangeRate, refNo, remarks, source, null);
        }
        
        /// <remarks/>
        public void AddRemoteRemittanceAsync(
                    string userName, 
                    string password, 
                    string controlNo, 
                    string benefName, 
                    string benefAddress, 
                    string benefTel, 
                    string benefMobile, 
                    string benefIdType, 
                    string benefAccIDNo, 
                    string senderName, 
                    string senderAddress, 
                    string senderTel, 
                    string senderMobile, 
                    string senderIdType, 
                    string senderIdNo, 
                    string purpose, 
                    string remitType, 
                    string payingBankBranchCd, 
                    string rCurrency, 
                    string localAmount, 
                    string amount, 
                    string serviceCharge, 
                    string rCommission, 
                    string exchangeRate, 
                    string refNo, 
                    string remarks, 
                    string source, 
                    object userState) {
            if ((this.AddRemoteRemittanceOperationCompleted == null)) {
                this.AddRemoteRemittanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteRemittanceOperationCompleted);
            }
            this.InvokeAsync("AddRemoteRemittance", new object[] {
                        userName,
                        password,
                        controlNo,
                        benefName,
                        benefAddress,
                        benefTel,
                        benefMobile,
                        benefIdType,
                        benefAccIDNo,
                        senderName,
                        senderAddress,
                        senderTel,
                        senderMobile,
                        senderIdType,
                        senderIdNo,
                        purpose,
                        remitType,
                        payingBankBranchCd,
                        rCurrency,
                        localAmount,
                        amount,
                        serviceCharge,
                        rCommission,
                        exchangeRate,
                        refNo,
                        remarks,
                        source}, this.AddRemoteRemittanceOperationCompleted, userState);
        }
        
        private void OnAddRemoteRemittanceOperationCompleted(object arg) {
            if ((this.AddRemoteRemittanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteRemittanceCompleted(this, new AddRemoteRemittanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CancelRemoteLocalRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] CancelRemoteLocalRemit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo) {
            object[] results = this.Invoke("CancelRemoteLocalRemit", new object[] {
                        userName,
                        password,
                        radNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CancelRemoteLocalRemitAsync(string userName, string password, string radNo) {
            this.CancelRemoteLocalRemitAsync(userName, password, radNo, null);
        }
        
        /// <remarks/>
        public void CancelRemoteLocalRemitAsync(string userName, string password, string radNo, object userState) {
            if ((this.CancelRemoteLocalRemitOperationCompleted == null)) {
                this.CancelRemoteLocalRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRemoteLocalRemitOperationCompleted);
            }
            this.InvokeAsync("CancelRemoteLocalRemit", new object[] {
                        userName,
                        password,
                        radNo}, this.CancelRemoteLocalRemitOperationCompleted, userState);
        }
        
        private void OnCancelRemoteLocalRemitOperationCompleted(object arg) {
            if ((this.CancelRemoteLocalRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRemoteLocalRemitCompleted(this, new CancelRemoteLocalRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:CancelRemoteRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] CancelRemoteRemit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo) {
            object[] results = this.Invoke("CancelRemoteRemit", new object[] {
                        userName,
                        password,
                        radNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void CancelRemoteRemitAsync(string userName, string password, string radNo) {
            this.CancelRemoteRemitAsync(userName, password, radNo, null);
        }
        
        /// <remarks/>
        public void CancelRemoteRemitAsync(string userName, string password, string radNo, object userState) {
            if ((this.CancelRemoteRemitOperationCompleted == null)) {
                this.CancelRemoteRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelRemoteRemitOperationCompleted);
            }
            this.InvokeAsync("CancelRemoteRemit", new object[] {
                        userName,
                        password,
                        radNo}, this.CancelRemoteRemitOperationCompleted, userState);
        }
        
        private void OnCancelRemoteRemitOperationCompleted(object arg) {
            if ((this.CancelRemoteRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelRemoteRemitCompleted(this, new CancelRemoteRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRemoteVostroAccDetail", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRemoteVostroAccDetail([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accNo) {
            object[] results = this.Invoke("GetRemoteVostroAccDetail", new object[] {
                        userName,
                        password,
                        accNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteVostroAccDetailAsync(string userName, string password, string accNo) {
            this.GetRemoteVostroAccDetailAsync(userName, password, accNo, null);
        }
        
        /// <remarks/>
        public void GetRemoteVostroAccDetailAsync(string userName, string password, string accNo, object userState) {
            if ((this.GetRemoteVostroAccDetailOperationCompleted == null)) {
                this.GetRemoteVostroAccDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteVostroAccDetailOperationCompleted);
            }
            this.InvokeAsync("GetRemoteVostroAccDetail", new object[] {
                        userName,
                        password,
                        accNo}, this.GetRemoteVostroAccDetailOperationCompleted, userState);
        }
        
        private void OnGetRemoteVostroAccDetailOperationCompleted(object arg) {
            if ((this.GetRemoteVostroAccDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteVostroAccDetailCompleted(this, new GetRemoteVostroAccDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetCashExpressRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetCashExpressRemit([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo) {
            object[] results = this.Invoke("GetCashExpressRemit", new object[] {
                        userName,
                        password,
                        radNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetCashExpressRemitAsync(string userName, string password, string radNo) {
            this.GetCashExpressRemitAsync(userName, password, radNo, null);
        }
        
        /// <remarks/>
        public void GetCashExpressRemitAsync(string userName, string password, string radNo, object userState) {
            if ((this.GetCashExpressRemitOperationCompleted == null)) {
                this.GetCashExpressRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashExpressRemitOperationCompleted);
            }
            this.InvokeAsync("GetCashExpressRemit", new object[] {
                        userName,
                        password,
                        radNo}, this.GetCashExpressRemitOperationCompleted, userState);
        }
        
        private void OnGetCashExpressRemitOperationCompleted(object arg) {
            if ((this.GetCashExpressRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashExpressRemitCompleted(this, new GetCashExpressRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRemoteLocalStatus", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRemoteLocalStatus([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string radNo) {
            object[] results = this.Invoke("GetRemoteLocalStatus", new object[] {
                        userName,
                        password,
                        radNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteLocalStatusAsync(string userName, string password, string radNo) {
            this.GetRemoteLocalStatusAsync(userName, password, radNo, null);
        }
        
        /// <remarks/>
        public void GetRemoteLocalStatusAsync(string userName, string password, string radNo, object userState) {
            if ((this.GetRemoteLocalStatusOperationCompleted == null)) {
                this.GetRemoteLocalStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteLocalStatusOperationCompleted);
            }
            this.InvokeAsync("GetRemoteLocalStatus", new object[] {
                        userName,
                        password,
                        radNo}, this.GetRemoteLocalStatusOperationCompleted, userState);
        }
        
        private void OnGetRemoteLocalStatusOperationCompleted(object arg) {
            if ((this.GetRemoteLocalStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteLocalStatusCompleted(this, new GetRemoteLocalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:AddRemoteRemit", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] AddRemoteRemit(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string controlNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefAddress, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefTel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefMobile, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefIdType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string benefAccIDNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderAddress, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderTel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderMobile, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderIdType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string senderIdNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string purpose, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string remitType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string payingBankBranchCd, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string rCurrency, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string localAmount, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string amount, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string serviceCharge, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string rCommission, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string exchangeRate, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string refNo, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string remarks, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string source, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string newAccount, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerDOB) {
            object[] results = this.Invoke("AddRemoteRemit", new object[] {
                        userName,
                        password,
                        controlNo,
                        benefName,
                        benefAddress,
                        benefTel,
                        benefMobile,
                        benefIdType,
                        benefAccIDNo,
                        senderName,
                        senderAddress,
                        senderTel,
                        senderMobile,
                        senderIdType,
                        senderIdNo,
                        purpose,
                        remitType,
                        payingBankBranchCd,
                        rCurrency,
                        localAmount,
                        amount,
                        serviceCharge,
                        rCommission,
                        exchangeRate,
                        refNo,
                        remarks,
                        source,
                        newAccount,
                        customerDOB});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void AddRemoteRemitAsync(
                    string userName, 
                    string password, 
                    string controlNo, 
                    string benefName, 
                    string benefAddress, 
                    string benefTel, 
                    string benefMobile, 
                    string benefIdType, 
                    string benefAccIDNo, 
                    string senderName, 
                    string senderAddress, 
                    string senderTel, 
                    string senderMobile, 
                    string senderIdType, 
                    string senderIdNo, 
                    string purpose, 
                    string remitType, 
                    string payingBankBranchCd, 
                    string rCurrency, 
                    string localAmount, 
                    string amount, 
                    string serviceCharge, 
                    string rCommission, 
                    string exchangeRate, 
                    string refNo, 
                    string remarks, 
                    string source, 
                    string newAccount, 
                    string customerDOB) {
            this.AddRemoteRemitAsync(userName, password, controlNo, benefName, benefAddress, benefTel, benefMobile, benefIdType, benefAccIDNo, senderName, senderAddress, senderTel, senderMobile, senderIdType, senderIdNo, purpose, remitType, payingBankBranchCd, rCurrency, localAmount, amount, serviceCharge, rCommission, exchangeRate, refNo, remarks, source, newAccount, customerDOB, null);
        }
        
        /// <remarks/>
        public void AddRemoteRemitAsync(
                    string userName, 
                    string password, 
                    string controlNo, 
                    string benefName, 
                    string benefAddress, 
                    string benefTel, 
                    string benefMobile, 
                    string benefIdType, 
                    string benefAccIDNo, 
                    string senderName, 
                    string senderAddress, 
                    string senderTel, 
                    string senderMobile, 
                    string senderIdType, 
                    string senderIdNo, 
                    string purpose, 
                    string remitType, 
                    string payingBankBranchCd, 
                    string rCurrency, 
                    string localAmount, 
                    string amount, 
                    string serviceCharge, 
                    string rCommission, 
                    string exchangeRate, 
                    string refNo, 
                    string remarks, 
                    string source, 
                    string newAccount, 
                    string customerDOB, 
                    object userState) {
            if ((this.AddRemoteRemitOperationCompleted == null)) {
                this.AddRemoteRemitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddRemoteRemitOperationCompleted);
            }
            this.InvokeAsync("AddRemoteRemit", new object[] {
                        userName,
                        password,
                        controlNo,
                        benefName,
                        benefAddress,
                        benefTel,
                        benefMobile,
                        benefIdType,
                        benefAccIDNo,
                        senderName,
                        senderAddress,
                        senderTel,
                        senderMobile,
                        senderIdType,
                        senderIdNo,
                        purpose,
                        remitType,
                        payingBankBranchCd,
                        rCurrency,
                        localAmount,
                        amount,
                        serviceCharge,
                        rCommission,
                        exchangeRate,
                        refNo,
                        remarks,
                        source,
                        newAccount,
                        customerDOB}, this.AddRemoteRemitOperationCompleted, userState);
        }
        
        private void OnAddRemoteRemitOperationCompleted(object arg) {
            if ((this.AddRemoteRemitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddRemoteRemitCompleted(this, new AddRemoteRemitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRegion", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRegion([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password) {
            object[] results = this.Invoke("GetRegion", new object[] {
                        userName,
                        password});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRegionAsync(string userName, string password) {
            this.GetRegionAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void GetRegionAsync(string userName, string password, object userState) {
            if ((this.GetRegionOperationCompleted == null)) {
                this.GetRegionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegionOperationCompleted);
            }
            this.InvokeAsync("GetRegion", new object[] {
                        userName,
                        password}, this.GetRegionOperationCompleted, userState);
        }
        
        private void OnGetRegionOperationCompleted(object arg) {
            if ((this.GetRegionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegionCompleted(this, new GetRegionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRemoteTransactionDetail", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRemoteTransactionDetail([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string date) {
            object[] results = this.Invoke("GetRemoteTransactionDetail", new object[] {
                        userName,
                        password,
                        date});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteTransactionDetailAsync(string userName, string password, string date) {
            this.GetRemoteTransactionDetailAsync(userName, password, date, null);
        }
        
        /// <remarks/>
        public void GetRemoteTransactionDetailAsync(string userName, string password, string date, object userState) {
            if ((this.GetRemoteTransactionDetailOperationCompleted == null)) {
                this.GetRemoteTransactionDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteTransactionDetailOperationCompleted);
            }
            this.InvokeAsync("GetRemoteTransactionDetail", new object[] {
                        userName,
                        password,
                        date}, this.GetRemoteTransactionDetailOperationCompleted, userState);
        }
        
        private void OnGetRemoteTransactionDetailOperationCompleted(object arg) {
            if ((this.GetRemoteTransactionDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteTransactionDetailCompleted(this, new GetRemoteTransactionDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:GetRemoteAccountDetail", RequestNamespace="http://global.service.ntech", ResponseNamespace="http://global.service.ntech", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", IsNullable=true)]
        public string[] GetRemoteAccountDetail([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string accNo) {
            object[] results = this.Invoke("GetRemoteAccountDetail", new object[] {
                        userName,
                        password,
                        accNo});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetRemoteAccountDetailAsync(string userName, string password, string accNo) {
            this.GetRemoteAccountDetailAsync(userName, password, accNo, null);
        }
        
        /// <remarks/>
        public void GetRemoteAccountDetailAsync(string userName, string password, string accNo, object userState) {
            if ((this.GetRemoteAccountDetailOperationCompleted == null)) {
                this.GetRemoteAccountDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRemoteAccountDetailOperationCompleted);
            }
            this.InvokeAsync("GetRemoteAccountDetail", new object[] {
                        userName,
                        password,
                        accNo}, this.GetRemoteAccountDetailOperationCompleted, userState);
        }
        
        private void OnGetRemoteAccountDetailOperationCompleted(object arg) {
            if ((this.GetRemoteAccountDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRemoteAccountDetailCompleted(this, new GetRemoteAccountDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetBankCompletedEventHandler(object sender, GetBankCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBankCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBankCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetBranchCompletedEventHandler(object sender, GetBranchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBranchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBranchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRemoteRemitCompletedEventHandler(object sender, GetRemoteRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddRemoteLocalRemitCompletedEventHandler(object sender, AddRemoteLocalRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteLocalRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteLocalRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRemoteFxRateCompletedEventHandler(object sender, GetRemoteFxRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteFxRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteFxRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ProcessRemoteRemitCompletedEventHandler(object sender, ProcessRemoteRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessRemoteRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessRemoteRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AmendRemoteTxnCompletedEventHandler(object sender, AmendRemoteTxnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AmendRemoteTxnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AmendRemoteTxnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void ProcessCashExpressRemitCompletedEventHandler(object sender, ProcessCashExpressRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProcessCashExpressRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProcessCashExpressRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetAgentCompletedEventHandler(object sender, GetAgentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAgentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAgentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRemoteStatusCompletedEventHandler(object sender, GetRemoteStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddRemoteRemittanceCompletedEventHandler(object sender, AddRemoteRemittanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteRemittanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteRemittanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CancelRemoteLocalRemitCompletedEventHandler(object sender, CancelRemoteLocalRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelRemoteLocalRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelRemoteLocalRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void CancelRemoteRemitCompletedEventHandler(object sender, CancelRemoteRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelRemoteRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelRemoteRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRemoteVostroAccDetailCompletedEventHandler(object sender, GetRemoteVostroAccDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteVostroAccDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteVostroAccDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetCashExpressRemitCompletedEventHandler(object sender, GetCashExpressRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashExpressRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashExpressRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRemoteLocalStatusCompletedEventHandler(object sender, GetRemoteLocalStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteLocalStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteLocalStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void AddRemoteRemitCompletedEventHandler(object sender, AddRemoteRemitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddRemoteRemitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddRemoteRemitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRegionCompletedEventHandler(object sender, GetRegionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRegionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRemoteTransactionDetailCompletedEventHandler(object sender, GetRemoteTransactionDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteTransactionDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteTransactionDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    public delegate void GetRemoteAccountDetailCompletedEventHandler(object sender, GetRemoteAccountDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRemoteAccountDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRemoteAccountDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591