using System;
using System.Data;
using System.Globalization;
using System.Text;
using System.Threading;
using System.Web.UI;
using Swift.DAL.BL.Remit.Transaction;
using Swift.DAL.SwiftDAL;
using Swift.web.Library;

namespace Swift.web.SwiftSystem.Reports.AnalysisReport
{
    public partial class TranAnalysisReport : Page
    {
        private Boolean AllowDrillDown;
        private string cssClass = "TBLReport";
        private string fieldAlignment = "";
        private string fieldFormat = "";
        private string fieldWrap = "";
        private Boolean mergeColumnHead;
        private ReportResult reportResult = new ReportResult();
        private int subTotalBy = -1;
        private string subTotalFields = "";
        private string subTotalText = "";
        private string totalFields = "";
        private string totalText = "";
        private int totalPage = 0;
        private int pageNo = 0;
        private string groupById = GetStatic.ReadQueryString("groupById", "");
        private string groupBy = GetStatic.ReadQueryString("groupBy", "");
        private string isExportFull = "";
        private double grandTotal = 0.00;
        private double grandTotalUsd = 0.00;

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (GetStatic.GetUser() == "")
                    Response.Redirect(GetStatic.GetDefaultPage());
            }
            PrintReport();
        }

        private void PrintHead()
        {
            Page.Title = reportResult.ReportHead;
            head.InnerHtml = reportResult.ReportHead;
        }

        private void PrintFilters()
        {
            var user = GetStatic.GetUser();
            var now = GetStatic.GetUserDateTime();
            filters.InnerHtml = "Filters Applied : <br />" + reportResult.Filters +
                                "<br /><br />Generated On=" + now +
                                " || Generated By=" + user;
        }

        private void PrintError()
        {
            rptDiv.InnerHtml = "<div class = \"reportError\">" + reportResult.Msg + "</div>";
        }

        private void PrintReport()
        {
            string reportName = GetStatic.ReadQueryString("reportName", "").ToLower();
            string mode = GetStatic.ReadQueryString("mode", "").ToLower();
            isExportFull = GetStatic.ReadQueryString("mode", "").ToLower() == "download" ? "Y" : "N";
            reportResult = PrepareReport(reportName);
            if (mode == "download")
            {
                string format = GetStatic.ReadQueryString("format", "xls");
                Response.Clear();
                Response.ClearContent();
                Response.ClearHeaders();
                Response.ContentType = "application/vnd.ms-excel";
                Response.AddHeader("Content-Disposition", "attachment; filename=" + reportName + "." + format);
                exportDiv.Visible = false;
            }

            PrintHead();
            PrintFilters();

            if (reportResult.ErrorCode != "0")
            {
                PrintError();
                return;
            }
            if (reportName == "usermatrix")
            {
                PrintUserMatrixReport();
                return;
            }
            DataTable dt;
            int tableCount = reportResult.Result.Tables.Count;
            if (tableCount > 4)
            {
                if (mode != "download")
                    ShowPaging(reportResult.Result.Tables[0]);
                dt = reportResult.Result.Tables[1];
            }
            else
            {
                dt = reportResult.ResultSet;
            }
            string reportText = GenerateReport(ref dt);
            rptDiv.InnerHtml = reportText;
        }

        private void ShowPaging(DataTable dt)
        {
            DataTable dtPaging = dt;
            int totalRecords = Convert.ToInt32(dtPaging.Rows[0]["TXNCOUNT"].ToString());
            int PageSizes = Convert.ToInt32(dtPaging.Rows[0]["PAGESIZE"].ToString());
            int PageNumber = Convert.ToInt32(dtPaging.Rows[0]["PAGENUMBER"].ToString());
            if (dtPaging.Columns.Count > 3)
                grandTotal = Convert.ToDouble(dtPaging.Rows[0]["GRANDTOTAL"].ToString());

            if (dtPaging.Columns.Count > 4)
                grandTotalUsd = Convert.ToDouble(dtPaging.Rows[0]["GRANDTOTAL_USD"].ToString());

            string cssLink = "pagingLink";

            totalPage = totalRecords / PageSizes;
            if ((totalPage * PageSizes) < totalRecords)
                totalPage++;

            var sbPaging = new StringBuilder("<table class=\"table table-responsive\"><tr><td nowrap='nowrap'>");
            sbPaging.AppendLine("<div  class='reportFilters' ");
            sbPaging.AppendLine("<span style='float:left; width:auto; margin-top:5px;'>Results:&nbsp; " + totalRecords + " records &nbsp; </span>");
            paging.Visible = true;

            int currPage = GetPageNumber();
            int startPage = (currPage - 5 <= 0 ? 1 : currPage - 5);
            int offSet = (startPage == 1 ? ((currPage - 5) * -1 + 1) : 0);
            int endPage = currPage + 4 + offSet;

            endPage = currPage == 0 ? 10 : endPage;
            endPage = (endPage > totalPage ? totalPage : endPage);

            if (currPage > 10 && (endPage - startPage) + 1 != 10)
            {
                startPage = startPage - (10 - (endPage - startPage + 1));
            }

            if (totalRecords > PageSizes)
            {
                sbPaging.AppendLine("<img onclick='GotoPage(1);' src='../../../Images/paging_Icons/first_page.png' alt='First Page' style='margin-top:5px;float:left;border:none;cursor:pointer' />");
                sbPaging.AppendLine("<img " + (GetPageNumber() != 1 ? " onclick='GotoPage(" + (GetPageNumber() - 1) + ");'" : "") + " src='../../../Images/paging_Icons/" + (GetPageNumber() == 1 ? "previous_page_dis" : "previous_page") + ".png' style='margin-top:5px;float:left;border:none;cursor:pointer' alt='Previous Page' /></a>");

                for (int i = startPage; i < endPage + 1; i++)
                {
                    cssLink = PageNumber == i ? "pagingLinkSelected" : "pagingLink";
                    sbPaging.AppendLine("<span onclick ='GotoPage(" + i + ");' class='" + cssLink + "'>" + i + "</span>");
                }

                sbPaging.AppendLine("<img " + (GetPageNumber() != totalPage ? "onclick=GotoPage(" + (GetPageNumber() + 1) + ");" : "") + " src='../../../Images/paging_Icons/" + (GetPageNumber() == totalPage ? "next_page_dis" : "next_page") + ".png' style='margin-top:5px;border:none;cursor:pointer' alt='Next Page' /></a>");
                sbPaging.AppendLine("<img  onclick=GotoPage(" + totalPage + "); src='../../../Images/paging_Icons/last_page.png' style='margin-top:5px;border:none;cursor:pointer' />");
            }
            sbPaging.AppendLine("</div></td><td nowrap='nowrap' width='135' align=\"right\">");

            if (totalRecords > PageSizes)
                sbPaging.AppendLine("Goto Page:  " + GotoList(totalPage));
            sbPaging.AppendLine("</td></tr></table>");
            paging.InnerHtml = sbPaging.ToString();
        }

        private int GetPageNumber()
        {
            return Convert.ToInt32(GetStatic.ReadNumericDataFromQueryString("pageNumber") == 0 ? 1 : GetStatic.ReadNumericDataFromQueryString("pageNumber"));
        }

        protected string GetURL()
        {
            return Request.Url.AbsoluteUri.Replace("&pageNumber=" + GetPageNumber(), "");
        }

        private string GotoList(int totalPage)
        {
            StringBuilder sb = new StringBuilder("");
            sb.AppendLine("<select id='gotoLabel' onchange=GotoPage(this.value); style='min-width:50px'>");
            for (int i = 0; i < totalPage; i++)
            {
                sb.AppendLine("<option value='" + (i + 1) + "' " + (GetPageNumber() == (i + 1) ? "Selected=Selected" : "") + " >" + (i + 1) + "</option>");
            }
            sb.AppendLine("</select>");
            return sb.ToString();
        }

        private ReportResult PrepareReport(string reportName)
        {
            if (reportName == "tran")
                reportResult = PrepareTranReport();
            else if (reportName == "trananalysis")
                reportResult = PrepareTranAnalysisRpt();
            else if (reportName == "trananalysisint")
                reportResult = PrepareTranAnalysisIntRpt();
            else if (reportName == "userwise")
                reportResult = PrepareUserWiseReport();
            else if (reportName.Equals("20168000"))
                reportResult = Prepare_20168000_Rpt();
            else if (reportName.Equals("trananalysisch"))
                reportResult = PrepareTranAnalysisRptCH();
            else if (reportName == "trananalysisdom")
                reportResult = TranAnalysisDomestic();
            else if (reportName == "trananalysisintl")
                reportResult = TranAnalysisIntl();
            else if (reportName == "20162310")
                reportResult = TranAnalysisIntl_20162310();
            else if (reportName == "20821200")
                reportResult = Prepare_20821200();
            return reportResult;
        }

        private ReportResult Prepare_20821200()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");
            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");
            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");
            string sAgentGrp = GetStatic.ReadQueryString("sAgentGrp", "");
            string rAgentGrp = GetStatic.ReadQueryString("rAgentGrp", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "|||||||N|||||||N|";
                fieldAlignment = "L|L|L|L|L|L|L|R|L|L|L|L|L|L|R|L";
                totalFields = "7|14";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetCustomerRecordAnalysis(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, rLocation, rZone, rDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText,
                fromTime, toTime, isExportFull, sAgentGrp, rAgentGrp));
        }

        private ReportResult PrepareTranReport()
        {
            string reportType = GetStatic.ReadQueryString("reportType", "");
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            if (reportType == "S")
            {
                fieldFormat = "||N|N";
                fieldAlignment = "L|L|R|R";
                totalText = "<b>Total</b>";
                totalFields = "2|3";
            }
            if (reportType == "P")
            {
                fieldFormat = "||N";
                fieldAlignment = "L|L|R";
                totalText = "<b>Totals</b>";
                totalFields = "2";
            }
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string user = GetStatic.GetUser();

            return (new TranReportDao().GetReport(user, fromDate, toDate, reportType, pageNumber, GetStatic.GetReportPagesize(), GetStatic.GetSessionId()));
        }

        private ReportResult PrepareTranAnalysisIntRpt()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");

            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");

            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");

            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");

            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "|||||||N|||||||N|";
                fieldAlignment = "L|L|L|L|L|L|L|R|L|L|L|L|L|L|R|L";
                totalFields = "7|14";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetTranAnalysisIntRpt(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, rLocation, rZone, rDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText, fromTime, toTime, isExportFull));
        }

        private ReportResult PrepareTranAnalysisRpt()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");

            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");

            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");

            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");

            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sZone = GetStatic.ReadQueryString("sZone", "");
            string sDistrict = GetStatic.ReadQueryString("sDistrict", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string sLocation = GetStatic.ReadQueryString("sLocation", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");
            string remitProduct = GetStatic.ReadQueryString("remitProduct", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "|||||||N|||||||N|";
                fieldAlignment = "L|L|L|L|L|L|L|R|L|L|L|L|L|L|R|L";
                totalFields = "7|14";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetTranAnalysisRpt(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, sLocation, rLocation, rZone, rDistrict, sZone, sDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText, fromTime, toTime, isExportFull, remitProduct));
        }

        private ReportResult Prepare_20168000_Rpt()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");

            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");

            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");

            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");

            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sZone = GetStatic.ReadQueryString("sZone", "");
            string sDistrict = GetStatic.ReadQueryString("sDistrict", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string sLocation = GetStatic.ReadQueryString("sLocation", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "|||||||N|||||||N|";
                fieldAlignment = "L|L|L|L|L|L|L|R|L|L|L|L|L|L|R|L";
                totalFields = "7|14";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetTransactionRptCooperative(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, sLocation, rLocation, rZone, rDistrict, sZone, sDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText, fromTime, toTime));
        }

        private ReportResult PrepareUserWiseReport()
        {
            fieldFormat = "|||N|N";
            fieldAlignment = "L|L|R|R|R";
            totalText = "<b>Total</b>";
            totalFields = "2|4";
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string agentId = GetStatic.ReadQueryString("userName", "");
            string user = GetStatic.GetUser();

            return (new TranReportDao().GetEnrollDetailRpt(user, fromDate, toDate, agentId, pageNumber, GetStatic.GetReportPagesize()));
        }

        private ReportResult PrepareTranAnalysisRptCH()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");

            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");

            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");

            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "||||||N|||||||N||||";
                fieldAlignment = "L|L|L|L|L|L|R|L|L|L|L|L|L|R|L|L|L|L";
                totalFields = "6|13";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetTranAnalysisRptCH(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, rLocation, rZone, rDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText, fromTime, toTime, isExportFull));
        }

        private ReportResult TranAnalysisDomestic()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");
            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");
            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sZone = GetStatic.ReadQueryString("sZone", "");
            string sDistrict = GetStatic.ReadQueryString("sDistrict", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string sLocation = GetStatic.ReadQueryString("sLocation", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");
            string remitProduct = GetStatic.ReadQueryString("remitProduct", "");
            string sAgentGrp = GetStatic.ReadQueryString("sAgentGrp", "");
            string rAgentGrp = GetStatic.ReadQueryString("rAgentGrp", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "|||||||N|||||||N|";
                fieldAlignment = "L|L|L|L|L|L|L|R|L|L|L|L|L|L|R|L";
                totalFields = "7|14";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetTranAnalysisDom(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, sLocation, rLocation, rZone, rDistrict, sZone, sDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText, fromTime, toTime,
                isExportFull, remitProduct, sAgentGrp, rAgentGrp));
        }

        private ReportResult TranAnalysisIntl()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");
            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");
            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");
            string sAgentGrp = GetStatic.ReadQueryString("sAgentGrp", "");
            string rAgentGrp = GetStatic.ReadQueryString("rAgentGrp", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "|||||||N|||||||N|";
                fieldAlignment = "L|L|L|L|L|L|L|R|L|L|L|L|L|L|R|L";
                totalFields = "7|14";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetTranAnalysisIntl(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, rLocation, rZone, rDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText,
                fromTime, toTime, isExportFull, sAgentGrp, rAgentGrp));
        }

        private ReportResult TranAnalysisIntl_20162310()
        {
            string pageNumber = GetStatic.ReadQueryString("pageNumber", "1");
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");
            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");
            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string id = GetStatic.ReadQueryString("CurrId", "");
            string user = GetStatic.GetUser();
            string groupById = GetStatic.ReadQueryString("groupById", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");
            string sAgentGrp = GetStatic.ReadQueryString("sAgentGrp", "");
            string rAgentGrp = GetStatic.ReadQueryString("rAgentGrp", "");

            totalText = "<b>Total</b>";
            if (groupBy == "detail" || reportType == "detail" || groupById != "")
            {
                fieldFormat = "|||||||N|||||||N|";
                fieldAlignment = "L|L|L|L|L|L|L|R|L|L|L|L|L|L|R|L";
                totalFields = "7|14";
            }
            else
            {
                fieldFormat = "||||N";
                fieldAlignment = "L|L|L|C|R";
                totalFields = "3|4";
            }

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            return (new TranReportDao().GetTranAnalysisIntl_20162310(user, "main", fromDate, toDate, dateType, sAgent, sCountry,
                sBranch, rCountry, rAgent, rBranch, groupBy, reportType, id, status, controlNo, rLocation, rZone, rDistrict,
                (pageNumber == "" ? "1" : pageNumber), GetStatic.GetReportPagesize(), groupById, tranType, searchBy, searchByText,
                fromTime, toTime, isExportFull, sAgentGrp, rAgentGrp));
        }

        #region Generate Report

        public String GenerateReport(ref DataTable dt)
        {
            Thread.CurrentThread.CurrentCulture = new CultureInfo("en-us");

            var html = new StringBuilder("");
            html.AppendLine("<div>");
            html.AppendLine("<table class=\"table table-responsive table-bordered table-striped\" ");
            html.AppendLine(CreateReportHead(ref dt, mergeColumnHead, groupById, groupBy));
            html.AppendLine(CreateReportBody(ref dt, subTotalFields, totalFields, GetUrl()));
            html.AppendLine("<tr><td colspan='10' align='center'>");
            html.AppendLine("<strong>Page " + (pageNo == 0 ? 1 : pageNo) + " of " + totalPage + "</strong>");
            html.AppendLine("</td></tr>");
            html.AppendLine("</table>");
            html.AppendLine("</div>");
            return html.ToString();
        }

        private String CreateReportBody(ref DataTable dt, string subTotalFieldList, string totalFieldList, string url)
        {
            int cnt = 0;
            var body = new StringBuilder("");

            bool doSubTotal = subTotalBy > -1 ? true : false;
            bool doTotal = totalFieldList != "" ? true : false;

            string[] totalFieldsArray = totalFieldList.Replace(" ", "").Split('|');
            var totalValues = new double[totalFieldsArray.Length];

            string[] subTotalFieldsArray = subTotalFieldList.Replace(" ", "").Split('|');
            var subTotalValues = new double[subTotalFieldsArray.Length];

            string[] fieldFormatList = fieldFormat.Replace(" ", "").Split('|');

            string tmpSubTotalText = "||";

            foreach (DataRow row in dt.Rows)
            {
                if (doSubTotal)
                {
                    if (tmpSubTotalText == "||")
                        tmpSubTotalText = row[subTotalBy].ToString();

                    if (tmpSubTotalText != row[subTotalBy].ToString())
                    {
                        body.AppendLine(CreateTotalRow(ref dt, subTotalText, subTotalBy, subTotalFieldsArray,
                                                       subTotalValues, fieldFormatList, fieldAlignment, fieldWrap, groupById, groupBy));
                        tmpSubTotalText = row[subTotalBy].ToString();

                        for (int i = 0; i < subTotalValues.Length; i++)
                        {
                            subTotalValues[i] = 0;
                        }
                    }
                }
                body.AppendLine(++cnt % 2 == 1 ? "<tr>" : "<tr style=\"background: #F0F0F0;\">");

                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (groupById == "" && groupBy != "detail")
                    {
                        if (i != 1)
                        {
                            string format = GetFormat(fieldFormatList, i);

                            string data = row[i].ToString();
                            if (format != "")
                            {
                                double dataParse;
                                double.TryParse(row[i].ToString(), out dataParse);
                                data = dataParse < 0 ? GetStatic.ParseMinusValue(dataParse) : dataParse.ToString(format);
                                //Parse Minus Value
                            }
                            if (AllowDrillDown)
                            {
                                data = CreateLink(data);
                            }
                            string alignment = GetAlignment(fieldAlignment, i);
                            string noWrapProperty = GetNoWrapping(fieldWrap, i);
                            if (i == 3)
                            {
                                body.AppendLine("<td " + alignment + noWrapProperty +
                                                "><a href='../../../RemittanceSystem/RemittanceReports/AnalysisReport/TranAnalysisReport.aspx?" +
                                                url + "&groupById=" + row[1].ToString() + "'>" + data + "</a></td>");
                            }
                            else
                            {
                                body.AppendLine("<td " + alignment + noWrapProperty + ">" + data + "</td>");
                            }

                            if (doTotal)
                            {
                                int pos = Array.IndexOf(totalFieldsArray, i.ToString());

                                if (pos >= 0)
                                {
                                    double value;
                                    double.TryParse(row[i].ToString(), out value);
                                    totalValues[pos] = totalValues[pos] + value;
                                }
                            }

                            if (doSubTotal)
                            {
                                int pos = Array.IndexOf(subTotalFieldsArray, i.ToString());

                                if (pos >= 0)
                                {
                                    double value;
                                    double.TryParse(row[i].ToString(), out value);
                                    subTotalValues[pos] = subTotalValues[pos] + value;
                                }
                            }
                        }
                    }
                    else
                    {
                        string format = GetFormat(fieldFormatList, i);

                        string data = row[i].ToString();
                        if (format != "")
                        {
                            double dataParse;
                            double.TryParse(row[i].ToString(), out dataParse);
                            data = dataParse < 0 ? GetStatic.ParseMinusValue(dataParse) : dataParse.ToString(format);
                            //Parse Minus Value
                        }
                        if (AllowDrillDown)
                        {
                            data = CreateLink(data);
                        }
                        string alignment = GetAlignment(fieldAlignment, i);
                        string noWrapProperty = GetNoWrapping(fieldWrap, i);
                        if (i == 3)
                        {
                            body.AppendLine("<td " + alignment + noWrapProperty + ">" + data + "</td>");
                        }
                        else
                        {
                            body.AppendLine("<td " + alignment + noWrapProperty + ">" + data + "</td>");
                        }

                        if (doTotal)
                        {
                            int pos = Array.IndexOf(totalFieldsArray, i.ToString());

                            if (pos >= 0)
                            {
                                double value;
                                double.TryParse(row[i].ToString(), out value);
                                totalValues[pos] = totalValues[pos] + value;
                            }
                        }

                        if (doSubTotal)
                        {
                            int pos = Array.IndexOf(subTotalFieldsArray, i.ToString());

                            if (pos >= 0)
                            {
                                double value;
                                double.TryParse(row[i].ToString(), out value);
                                subTotalValues[pos] = subTotalValues[pos] + value;
                            }
                        }
                    }
                }

                body.AppendLine("</tr>");
            }

            if (doSubTotal)
            {
                body.AppendLine(CreateTotalRow(ref dt, subTotalText, subTotalBy, subTotalFieldsArray, subTotalValues,
                                               fieldFormatList, fieldAlignment, fieldWrap, groupById, groupBy));
            }

            if (doTotal)
            {
                body.AppendLine(CreateTotalRow(ref dt, totalText, 0, totalFieldsArray, totalValues, fieldFormatList,
                                               fieldAlignment, fieldWrap, groupById, groupBy));
            }

            return body.ToString();
        }

        private static String CreateTotalRow(ref DataTable dt, string totalText, int totalFieldIndex,
                                             string[] totalFields, Double[] totalValues, string[] fieldFormatList,
                                             string fieldAlignmentList, string fieldWrapList, string groupById, string groupBy)
        {
            var rowText = new StringBuilder("");

            rowText.AppendLine("<tr>");

            for (int i = 0; i < dt.Columns.Count; i++)
            {
                if (groupById == "" && groupBy != "detail")
                {
                    if (i != 1)
                    {
                        int pos = Array.IndexOf(totalFields, i.ToString());
                        string data = "";
                        string alignment = "";
                        string nowrapProperty = "";
                        if (pos >= 0)
                        {
                            string format = GetFormat(fieldFormatList, i);
                            data = totalValues[pos] < 0
                                       ? GetStatic.ParseMinusValue(totalValues[pos])
                                       : totalValues[pos].ToString(format.ToUpper());
                            alignment = GetAlignment(fieldAlignmentList, i);
                            nowrapProperty = GetNoWrapping(fieldWrapList, i);
                        }

                        if (i == totalFieldIndex) data = totalText;

                        rowText.AppendLine("<td" + alignment + nowrapProperty + "><b>" + data + "</b></td>");
                    }
                }
                else
                {
                    int pos = Array.IndexOf(totalFields, i.ToString());
                    string data = "";
                    string alignment = "";
                    string nowrapProperty = "";
                    if (pos >= 0)
                    {
                        string format = GetFormat(fieldFormatList, i);
                        data = totalValues[pos] < 0
                                   ? GetStatic.ParseMinusValue(totalValues[pos])
                                   : totalValues[pos].ToString(format.ToUpper());
                        alignment = GetAlignment(fieldAlignmentList, i);
                        nowrapProperty = GetNoWrapping(fieldWrapList, i);
                    }

                    if (i == totalFieldIndex) data = totalText;

                    rowText.AppendLine("<td" + alignment + nowrapProperty + "><b>" + data + "</b></td>");
                }
            }

            rowText.AppendLine("</tr>");
            return rowText.ToString();
        }

        private static string GetFormat(string[] fieldFormatList, int currFieldIndex)
        {
            return fieldFormatList.Length > currFieldIndex ? fieldFormatList[currFieldIndex] : "";
            //return ( pos == -1 ? "": fieldFormatList[pos]);
        }

        private static string GetNoWrapping(string fieldWrapList, int currFieldIndex)
        {
            if (fieldWrapList == "")
                return "";

            string[] wrapListArray = fieldWrapList.Split('|');
            string isWrap = wrapListArray.Length > currFieldIndex ? wrapListArray[currFieldIndex] : "";
            string noWrapValue = "";
            if (isWrap == "Y")
                noWrapValue = " nowrap = \"nowrap\"";
            return noWrapValue;
        }

        private static string GetAlignment(string fieldAlignmentList, int currFieldIndex)
        {
            if (fieldAlignmentList == "")
                return "";

            string[] alignListArray = fieldAlignmentList.Split('|');
            string alignName = alignListArray.Length > currFieldIndex ? alignListArray[currFieldIndex] : "";
            string align = "";
            switch (alignName.ToUpper())
            {
                case "R":
                    align = " align = \"right\"";
                    break;

                case "L":
                    align = " align = \"left\"";
                    break;

                case "C":
                    align = " align = \"center\"";
                    break;

                default:
                    break;
            }
            return align;
        }

        private static string CreateLink(string data)
        {
            return "";
        }

        private static String CreateReportHead(ref DataTable dt, Boolean merge, string groupById, string groupBy)
        {
            var head = new StringBuilder("");

            if (!merge)
            {
                head.AppendLine("<tr>");

                for (int i = 0; i < dt.Columns.Count; i++)
                {
                    if (groupById == "" && groupBy != "detail")
                    {
                        if (i != 1)
                        {
                            head.AppendLine("<th>" + dt.Columns[i].ColumnName + "</th>");
                        }
                    }
                    else
                    {
                        head.AppendLine("<th>" + dt.Columns[i].ColumnName + "</th>");
                    }
                }

                head.AppendLine("</tr>");
            }
            return head.ToString();
        }

        #endregion Generate Report

        #region Print Report

        private void PrintUserMatrixReport()
        {
            const string pStart = "<p style=\"page-break-after: always\">";
            const string pEnd = "</p>";
            var html = new StringBuilder();

            cssClass = "TBLReportMatrix";
            int employeeTable = 0;

            foreach (DataRow dr in reportResult.Result.Tables[0].Rows)
            {
                string name = dr["Name"].ToString();
                string department = dr["department"].ToString();
                string branch = dr["branch"].ToString();
                string supervisor = dr["supervisor"].ToString();

                DataTable rptDt = reportResult.Result.Tables[++employeeTable];
                string reportText = GenerateReport(ref rptDt).Replace("<td", "<td nowrap = \"nowrap\"");
                html.AppendLine(pStart);

                html.AppendLine("<div class = \"employee-div\">");
                html.AppendLine("Name: <b>" + name + "</b>");
                html.AppendLine("<br />");
                html.AppendLine("Department: <b>" + department + "</b>");
                html.AppendLine("<br />");
                html.AppendLine("Branch: <b>" + branch + "</b>");
                html.AppendLine("<br />");
                html.AppendLine("Supervisor: <b>" + supervisor + "</b>");
                html.AppendLine("</div>");
                html.AppendLine(reportText);
                html.AppendLine(pEnd);
            }

            rptDiv.InnerHtml = html.ToString();
            head.Visible = false;
            filters.Visible = false;
            hr1.Visible = false;
            hr2.Visible = false;
            export.Visible = false;
        }

        #endregion Print Report

        protected string GetUrl()
        {
            string fromDate = GetStatic.ReadQueryString("fromDate", "");
            string toDate = GetStatic.ReadQueryString("toDate", "");
            string fromTime = GetStatic.ReadQueryString("fromTime", "");
            string toTime = GetStatic.ReadQueryString("toTime", "");
            string status = GetStatic.ReadQueryString("status", "");
            string controlNo = GetStatic.ReadQueryString("controlNo", "");
            string dateType = GetStatic.ReadQueryString("dateType", "");
            string sCountry = GetStatic.ReadQueryString("sCountry", "");
            string sZone = GetStatic.ReadQueryString("sZone", "");
            string sDistrict = GetStatic.ReadQueryString("sDistrict", "");
            string sAgent = GetStatic.ReadQueryString("sAgent", "");
            string sBranch = GetStatic.ReadQueryString("sBranch", "");
            string rCountry = GetStatic.ReadQueryString("rCountry", "");
            string rZone = GetStatic.ReadQueryString("rZone", "");
            string rDistrict = GetStatic.ReadQueryString("rDistrict", "");
            string rAgent = GetStatic.ReadQueryString("rAgent", "");
            string rBranch = GetStatic.ReadQueryString("rBranch", "");
            string groupBy = GetStatic.ReadQueryString("groupBy", "");
            string reportType = GetStatic.ReadQueryString("Reportype", "");
            string sLocation = GetStatic.ReadQueryString("sLocation", "");
            string rLocation = GetStatic.ReadQueryString("rLocation", "");
            string tranType = GetStatic.ReadQueryString("tranType", "");
            string searchBy = GetStatic.ReadQueryString("searchBy", "");
            string searchByText = GetStatic.ReadQueryString("searchByText", "");
            string remitProduct = GetStatic.ReadQueryString("remitProduct", "");
            string sAgentGrp = GetStatic.ReadQueryString("sAgentGrp", "");
            string rAgentGrp = GetStatic.ReadQueryString("rAgentGrp", "");
            string id = GetStatic.ReadQueryString("CurrId", "");

            if (reportType != "")
            {
                string swapStr = groupBy;
                groupBy = reportType;
                reportType = swapStr;
            }

            switch (reportType)
            {
                case "sc":
                    sCountry = id;
                    break;

                case "sz":
                    sZone = id;
                    break;

                case "sd":
                    sDistrict = id;
                    break;

                case "sl":
                    sLocation = id;
                    break;

                case "sa":
                    sAgent = id;
                    break;

                case "sb":
                    sBranch = id;
                    break;

                case "rc":
                    rCountry = id;
                    break;

                case "rz":
                    rZone = id;
                    break;

                case "rd":
                    rDistrict = id;
                    break;

                case "rl":
                    rLocation = id;
                    break;

                case "ra":
                    rAgent = id;
                    break;

                case "rb":
                    rBranch = id;
                    break;
            }
            string getingUrl = "";
            string reportName = GetStatic.ReadQueryString("reportName", "").ToLower();
            if (reportName == "trananalysisint")
            {
                getingUrl = "reportName=trananalysisint&fromDate=" + fromDate
                               + "&toDate=" + toDate
                               + "&dateType=" + dateType
                               + "&sCountry=" + sCountry
                               + "&sAgent=" + sAgent
                               + "&sBranch=" + sBranch
                               + "&rCountry=" + rCountry
                               + "&rAgent=" + rAgent
                               + "&rBranch=" + rBranch
                               + "&groupBy=" + groupBy
                               + "&status=" + status
                               + "&controlNo=" + controlNo
                               + "&sLocation=" + sLocation
                               + "&rLocation=" + rLocation
                               + "&rZone=" + rZone
                               + "&rDistrict=" + rDistrict
                               + "&tranType=" + tranType
                               + "&searchBy=" + searchBy
                               + "&searchByText=" + searchByText
                               + "&fromTime=" + fromTime
                               + "&toTime=" + toTime + "";
            }
            else if (reportName == "trananalysisch")
            {
                getingUrl = "reportName=trananalysisch&fromDate=" + fromDate
                               + "&toDate=" + toDate
                               + "&dateType=" + dateType
                               + "&sCountry=" + sCountry
                               + "&sAgent=" + sAgent
                               + "&sBranch=" + sBranch
                               + "&rCountry=" + rCountry
                               + "&rAgent=" + rAgent
                               + "&rBranch=" + rBranch
                               + "&groupBy=" + groupBy
                               + "&status=" + status
                               + "&controlNo=" + controlNo
                               + "&sLocation=" + sLocation
                               + "&rLocation=" + rLocation
                               + "&rZone=" + rZone
                               + "&rDistrict=" + rDistrict
                               + "&tranType=" + tranType
                               + "&searchBy=" + searchBy
                               + "&searchByText=" + searchByText
                               + "&fromTime=" + fromTime
                               + "&toTime=" + toTime + "";
            }
            else if (reportName == "trananalysisdom")
            {
                getingUrl = "reportName=trananalysisdom&fromDate=" + fromDate
                            + "&toDate=" + toDate
                            + "&dateType=" + dateType
                            + "&sCountry=" + sCountry
                            + "&sAgent=" + sAgent
                            + "&sBranch=" + sBranch
                            + "&rCountry=" + rCountry
                            + "&rAgent=" + rAgent
                            + "&rBranch=" + rBranch
                            + "&groupBy=" + groupBy
                            + "&status=" + status
                            + "&controlNo=" + controlNo
                            + "&sLocation=" + sLocation
                            + "&rLocation=" + rLocation
                            + "&sZone=" + sZone
                            + "&sDistrict=" + sDistrict
                            + "&rZone=" + rZone
                            + "&rDistrict=" + rDistrict
                            + "&tranType=" + tranType
                            + "&searchBy=" + searchBy
                            + "&searchByText=" + searchByText
                            + "&remitProduct=" + remitProduct
                            + "&sAgentGrp=" + sAgentGrp
                            + "&rAgentGrp=" + rAgentGrp
                            + "&fromTime=" + fromTime
                            + "&toTime=" + toTime + "";
            }
            else if (reportName == "trananalysisintl")
            {
                getingUrl = "reportName=trananalysisintl&fromDate=" + fromDate
                               + "&toDate=" + toDate
                               + "&dateType=" + dateType
                               + "&sCountry=" + sCountry
                               + "&sAgent=" + sAgent
                               + "&sBranch=" + sBranch
                               + "&rCountry=" + rCountry
                               + "&rAgent=" + rAgent
                               + "&rBranch=" + rBranch
                               + "&groupBy=" + groupBy
                               + "&status=" + status
                               + "&controlNo=" + controlNo
                               + "&sLocation=" + sLocation
                               + "&rLocation=" + rLocation
                               + "&rZone=" + rZone
                               + "&rDistrict=" + rDistrict
                               + "&tranType=" + tranType
                               + "&searchBy=" + searchBy
                               + "&searchByText=" + searchByText
                               + "&fromTime=" + fromTime
                               + "&sAgentGrp=" + sAgentGrp
                               + "&rAgentGrp=" + rAgentGrp
                               + "&toTime=" + toTime + "";
            }
            else if (reportName == "20162310")
            {
                getingUrl = "reportName=20162310&fromDate=" + fromDate
                               + "&toDate=" + toDate
                               + "&dateType=" + dateType
                               + "&sCountry=" + sCountry
                               + "&sAgent=" + sAgent
                               + "&sBranch=" + sBranch
                               + "&rCountry=" + rCountry
                               + "&rAgent=" + rAgent
                               + "&rBranch=" + rBranch
                               + "&groupBy=" + groupBy
                               + "&status=" + status
                               + "&controlNo=" + controlNo
                               + "&sLocation=" + sLocation
                               + "&rLocation=" + rLocation
                               + "&rZone=" + rZone
                               + "&rDistrict=" + rDistrict
                               + "&tranType=" + tranType
                               + "&searchBy=" + searchBy
                               + "&searchByText=" + searchByText
                               + "&fromTime=" + fromTime
                               + "&sAgentGrp=" + sAgentGrp
                               + "&rAgentGrp=" + rAgentGrp
                               + "&toTime=" + toTime + "";
            }
            else
            {
                getingUrl = "reportName=trananalysis&fromDate=" + fromDate
                            + "&toDate=" + toDate
                            + "&dateType=" + dateType
                            + "&sCountry=" + sCountry
                            + "&sAgent=" + sAgent
                            + "&sBranch=" + sBranch
                            + "&rCountry=" + rCountry
                            + "&rAgent=" + rAgent
                            + "&rBranch=" + rBranch
                            + "&groupBy=" + groupBy
                            + "&status=" + status
                            + "&controlNo=" + controlNo
                            + "&sLocation=" + sLocation
                            + "&rLocation=" + rLocation
                            + "&sZone=" + sZone
                            + "&sDistrict=" + sDistrict
                            + "&rZone=" + rZone
                            + "&rDistrict=" + rDistrict
                            + "&tranType=" + tranType
                            + "&searchBy=" + searchBy
                            + "&searchByText=" + searchByText
                            + "&remitProduct=" + remitProduct
                            + "&fromTime=" + fromTime
                            + "&toTime=" + toTime + "";
            }
            if (reportName == "20821200")
            {
                getingUrl = "reportName=20821200&fromDate=" + fromDate
                               + "&toDate=" + toDate
                               + "&dateType=" + dateType
                               + "&sCountry=" + sCountry
                               + "&sAgent=" + sAgent
                               + "&sBranch=" + sBranch
                               + "&rCountry=" + rCountry
                               + "&rAgent=" + rAgent
                               + "&rBranch=" + rBranch
                               + "&groupBy=" + groupBy
                               + "&status=" + status
                               + "&controlNo=" + controlNo
                               + "&sLocation=" + sLocation
                               + "&rLocation=" + rLocation
                               + "&rZone=" + rZone
                               + "&rDistrict=" + rDistrict
                               + "&tranType=" + tranType
                               + "&searchBy=" + searchBy
                               + "&searchByText=" + searchByText
                               + "&fromTime=" + fromTime
                               + "&toTime=" + toTime + "";
            }
            return getingUrl;
        }
    }
}